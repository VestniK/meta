// Named const for useful terminals
identifier <identifier>;
annotation <annotation>;
strLiteral <str>;

trueVal 'true';
falseVal 'false';

Extern 'extern';
Export 'export';
Public 'public';
Protected 'protected';
Private 'private';

addOp '+';
subOp '-';
mulOp '*';
divOp '/';
eqOp '==';
neqOp '!=';
greaterOp '>';
greatereqOp '>=';
lessOp '<';
lesseqOp '<=';
notOp '!';
andOp '&&';
orOp '||';

// Operations priority
{ '||' } << // lower priority
{ '&&' } <<
{ '==' '!=' } <<
{ '<' '<=' '>' '>=' } <<
{ '+' '-' } <<
{ '*' '/' } << // higher priority

// Grammar rules
Goal -> Source <eof>

Source -> PackageHdr [Import]... [Declaration | VisibilityChange]... *> SourceFile

PackageHdr -> 'package' QualifiedName ';' => package

QualifiedName -> <identifier>/'.'...

Import -> 'import' QualifiedName ';' +> Import
       -> 'import' QualifiedName as <identifier> ';' +> Import

VisibilityChange -> Visibility ':' => changeVisibility
Visibility -> 'extern'
           -> 'export'
           -> 'public'
           -> 'protected'
           -> 'private'

Declaration -> Function

Annotation -> <annotation> +> Annotation

// [Annotation...] [Visibility] <identifier> <identifier> '(' [VarDecl]/','... ')' (CodeBlock|';') leads to shift-reduce conflict
// which is resolved by spliting this rule into two.
Function -> [Visibility] Type <identifier> '(' [VarDecl]/','... ')' (CodeBlock|';') *> Function
         -> Annotation... [Visibility] Type <identifier> '(' [VarDecl]/','... ')' (CodeBlock|';') *> Function
CodeBlock -> '{' (Statement)... '}' +> CodeBlock
VarDecl -> Type <identifier> ['=' Expr] +> VarDecl
Type -> 'int'
     -> 'bool'
     -> 'auto'
     -> 'void'
     -> 'string'
     -> <identifier>

Statement -> CodeBlock
          -> If
          -> VarDecl ';'
          -> Expr ';' +> ExprStatement
          -> 'return' [Expr] ';' +> Return
          -> ';' // Empty Statement no node created

If -> 'if' '(' Expr ')' Statement ['else' Statement] +> If

Expr -> UnaryExpr
     -> Expr '+' Expr +> BinaryOp
     -> Expr '-' Expr +> BinaryOp
     -> Expr '*' Expr +> BinaryOp
     -> Expr '/' Expr +> BinaryOp
     -> Expr '==' Expr +> BinaryOp
     -> Expr '!=' Expr +> BinaryOp
     -> Expr '>' Expr +> BinaryOp
     -> Expr '>=' Expr +> BinaryOp
     -> Expr '<' Expr +> BinaryOp
     -> Expr '<=' Expr +> BinaryOp
     -> Expr '&&' Expr +> BinaryOp
     -> Expr '||' Expr +> BinaryOp
     -> Var '=' Expr +> Assigment

UnaryExpr -> '+' UnaryExpr +> PrefixOp
          -> '-' UnaryExpr +> PrefixOp
          -> '!' UnaryExpr +> PrefixOp
          -> <num> +> Number
          -> <str> +> StrLiteral
          -> ValueLiteral
          -> Var  +> Var
          -> '(' Expr ')'
          ->  <identifier> '(' [Expr]/','... ')' +> Call

Var -> <identifier>

ValueLiteral -> 'true' +> Literal
             -> 'false' +> Literal
