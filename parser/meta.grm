{ '+' '-' } <<  // lower priority
{ '*' '/' } <<  // higher priority

Goal -> Package <eof>

Package -> 'package' (<qname> | <identifier>) ';' [Function]... +> Package

Function -> <identifier> <identifier> '(' [Arg]/','... ')' '{' (Statement)... '}' +> Function
Arg -> <identifier> <identifier> +> Arg

Statement -> <identifier> <identifier> ['=' Expr] ';' +> VarDecl
          -> Var '=' Expr ';' +> Assigment
          -> 'return' Expr ';' +> Return

Expr -> Expr '+' Expr +> BinaryOp
     -> Expr '-' Expr +> BinaryOp
     -> Expr '*' Expr +> BinaryOp
     -> Expr '/' Expr +> BinaryOp
     -> '(' Expr ')'
     -> <num> +> Number
     -> Var
     -> Call

Var -> <identifier> +> Var

Call -> <identifier> '(' [Expr]/','... ')' +> Call
