// Named const for useful terminals
trueVal 'true';
falseVal 'false';
addOp '+';
subOp '-';
mulOp '*';
divOp '/';
eqOp '==';
neqOp '!=';
greaterOp '>';
greatereqOp '>=';
lessOp '<';
lesseqOp '<=';

// Operations priority
{ '==' '!=' } << // lower priority
{ '<' '<=' '>' '>=' } <<
{ '+' '-' } <<
{ '*' '/' } << // higher priority

// Grammar rules
Goal -> Package <eof>

Package -> Header [Function]...

Header -> 'package' (<qname> | <identifier>) ';' => package

Function -> <identifier> <identifier> '(' [VarDecl]/','... ')' CodeBlock *> Function
CodeBlock -> '{' (Statement)... '}' +> CodeBlock
VarDecl -> <identifier> <identifier> ['=' Expr] +> VarDecl

Statement -> CodeBlock
          -> VarDecl ';'
          -> Expr ';' +> ExprStatement
          -> 'return' Expr ';' +> Return

Expr -> UnaryExpr
     -> Expr '+' Expr +> BinaryOp
     -> Expr '-' Expr +> BinaryOp
     -> Expr '*' Expr +> BinaryOp
     -> Expr '/' Expr +> BinaryOp
     -> Expr '==' Expr +> BinaryOp
     -> Expr '!=' Expr +> BinaryOp
     -> Expr '>' Expr +> BinaryOp
     -> Expr '>=' Expr +> BinaryOp
     -> Expr '<' Expr +> BinaryOp
     -> Expr '<=' Expr +> BinaryOp
     -> Var '=' Expr +> Assigment

UnaryExpr -> '+' UnaryExpr +> PrefixOp
          -> '-' UnaryExpr +> PrefixOp
          -> <num> +> Number
          -> ValueLiteral
          -> Var  +> Var
          -> '(' Expr ')'
          ->  <identifier> '(' [Expr]/','... ')' +> Call

Var -> <identifier>

ValueLiteral -> 'true' +> Literal
             -> 'false' +> Literal
